name: XenOS CI / Release / Docs

on:
  push:
    branches: ["**"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    name: Build (verify)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run build script
        run: |
          chmod +x ./scripts/build.sh
          ./scripts/build.sh

      - name: Archive production build
        if: success()
        run: |
          cd build
          zip -r ../xenos-build.zip ./*
          cd ..

      - name: Upload build artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: xenos-build
          path: xenos-build.zip
          retention-days: 7

  release:
    name: Create Release (push only)
    needs: build
    if: github.event_name == 'push' && (github.ref_type != 'tag' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: xenos-build

      - name: Derive release metadata
        id: meta
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            TAG_NAME="${GITHUB_REF_NAME}"
            NAME="XenOS ${GITHUB_REF_NAME}"
            PRERELEASE=false
            KIND="Versioned"
          else
            TAG_NAME="auto-${SHORT_SHA}"
            NAME="XenOS build ${SHORT_SHA}"
            PRERELEASE=true
            KIND="Automated"
          fi
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "release_name=${NAME}" >> $GITHUB_OUTPUT
          echo "prerelease=${PRERELEASE}" >> $GITHUB_OUTPUT
          echo "kind=${KIND}" >> $GITHUB_OUTPUT
          echo "## ${NAME}" > release-notes.md
          echo "" >> release-notes.md
          echo "Type: ${KIND}" >> release-notes.md
          echo "Commit: \`${GITHUB_SHA}\`" >> release-notes.md
          echo "Ref: \`${GITHUB_REF_NAME}\`" >> release-notes.md
          echo "Built: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Installation" >> release-notes.md
          echo "1. Download \`xenos-build.zip\`" >> release-notes.md
          echo "2. Extract the archive" >> release-notes.md
          echo "3. Serve with any static file server (e.g. \`npx serve\`, \`python -m http.server\`)" >> release-notes.md
          echo "4. Open in browser" >> release-notes.md

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag_name }}
          name: ${{ steps.meta.outputs.release_name }}
          body_path: release-notes.md
          files: |
            xenos-build.zip
          draft: false
          prerelease: ${{ steps.meta.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docs:
    name: Build Typedoc
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate TypeDoc site
        run: pnpm typedoc

      - name: Upload docs artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy-docs:
    name: Deploy Docs to Pages
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: docs
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
